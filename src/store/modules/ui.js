// ==============================================
// üìÅ src/store/modules/ui.js
// UI ÏÉÅÌÉú Í¥ÄÎ¶¨ Î™®Îìà
// ==============================================

/**
 * UI Í¥ÄÎ†® ÏÉÅÌÉú Í¥ÄÎ¶¨
 * - Î°úÎî© ÏÉÅÌÉú
 * - ÏïåÎ¶º Î©îÏãúÏßÄ
 * - Î™®Îã¨/Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÏÉÅÌÉú
 * - ÏÇ¨Ïù¥ÎìúÎ∞î ÏÉÅÌÉú
 */
const ui = {
  namespaced: true,

  // ========================================
  // ÏÉÅÌÉú Ï†ïÏùò
  // ========================================
  state: {
    // Î°úÎî© ÏÉÅÌÉú
    loading: false,
    loadingMessage: '',
    
    // ÏïåÎ¶º ÏÉÅÌÉú
    notifications: [],
    
    // ÏÇ¨Ïù¥ÎìúÎ∞î ÏÉÅÌÉú
    sidebarCollapsed: false,
    sidebarMobile: false,
    
    // Î™®Îã¨ ÏÉÅÌÉú
    modals: {},
    
    // ÏóêÎü¨ ÏÉÅÌÉú
    globalError: null,
    
    // Î∏åÎ†àÎìúÌÅ¨Îüº
    breadcrumbs: []
  },

  // ========================================
  // Í≤åÌÑ∞ Ï†ïÏùò
  // ========================================
  getters: {
    isLoading: (state) => state.loading,
    loadingMessage: (state) => state.loadingMessage,
    notifications: (state) => state.notifications,
    unreadNotificationCount: (state) => state.notifications.filter(n => !n.read).length,
    isSidebarCollapsed: (state) => state.sidebarCollapsed,
    isMobile: (state) => state.sidebarMobile,
    globalError: (state) => state.globalError,
    breadcrumbs: (state) => state.breadcrumbs
  },

  // ========================================
  // ÎÆ§ÌÖåÏù¥ÏÖò Ï†ïÏùò
  // ========================================
  mutations: {
    SET_LOADING(state, { loading, message = '' }) {
      state.loading = loading
      state.loadingMessage = message
    },

    ADD_NOTIFICATION(state, notification) {
      state.notifications.unshift({
        id: Date.now(),
        timestamp: new Date().toISOString(),
        read: false,
        ...notification
      })
    },

    REMOVE_NOTIFICATION(state, notificationId) {
      state.notifications = state.notifications.filter(n => n.id !== notificationId)
    },

    MARK_NOTIFICATION_READ(state, notificationId) {
      const notification = state.notifications.find(n => n.id === notificationId)
      if (notification) {
        notification.read = true
      }
    },

    TOGGLE_SIDEBAR(state) {
      state.sidebarCollapsed = !state.sidebarCollapsed
    },

    SET_SIDEBAR_COLLAPSED(state, collapsed) {
      state.sidebarCollapsed = collapsed
    },

    SET_MOBILE_MODE(state, isMobile) {
      state.sidebarMobile = isMobile
    },

    SET_MODAL(state, { name, visible, data = null }) {
      state.modals = {
        ...state.modals,
        [name]: { visible, data }
      }
    },

    SET_GLOBAL_ERROR(state, error) {
      state.globalError = error
    },

    SET_BREADCRUMBS(state, breadcrumbs) {
      state.breadcrumbs = breadcrumbs
    }
  },

  // ========================================
  // Ïï°ÏÖò Ï†ïÏùò
  // ========================================
  actions: {
    /**
     * UI Ï¥àÍ∏∞Ìôî
     */
    initialize({ commit }) {
      // ÌôîÎ©¥ ÌÅ¨Í∏∞Ïóê Îî∞Î•∏ Î™®Î∞îÏùº Î™®Îìú ÏÑ§Ï†ï
      const checkMobile = () => {
        const isMobile = window.innerWidth < 768
        commit('SET_MOBILE_MODE', isMobile)
        
        if (isMobile) {
          commit('SET_SIDEBAR_COLLAPSED', true)
        }
      }
      
      checkMobile()
      
      // ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
      window.addEventListener('resize', checkMobile)
    },

    /**
     * Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
     */
    setLoading({ commit }, loading, message = '') {
      commit('SET_LOADING', { loading, message })
    },

    /**
     * ÏïåÎ¶º Ï∂îÍ∞Ä
     */
    addNotification({ commit }, notification) {
      commit('ADD_NOTIFICATION', notification)
      
      // ÏûêÎèô Ï†úÍ±∞ (durationÏù¥ ÏÑ§Ï†ïÎêú Í≤ΩÏö∞)
      if (notification.duration) {
        setTimeout(() => {
          commit('REMOVE_NOTIFICATION', notification.id)
        }, notification.duration)
      }
    },

    /**
     * ÏÑ±Í≥µ ÏïåÎ¶º
     */
    showSuccess({ dispatch }, message) {
      dispatch('addNotification', {
        type: 'success',
        title: 'ÏÑ±Í≥µ',
        message,
        duration: 3000
      })
    },

    /**
     * ÏóêÎü¨ ÏïåÎ¶º
     */
    showError({ dispatch }, message) {
      dispatch('addNotification', {
        type: 'error',
        title: 'Ïò§Î•ò',
        message,
        duration: 5000
      })
    },

    /**
     * Í≤ΩÍ≥† ÏïåÎ¶º
     */
    showWarning({ dispatch }, message) {
      dispatch('addNotification', {
        type: 'warning',
        title: 'Í≤ΩÍ≥†',
        message,
        duration: 4000
      })
    },

    /**
     * Ï†ïÎ≥¥ ÏïåÎ¶º
     */
    showInfo({ dispatch }, message) {
      dispatch('addNotification', {
        type: 'info',
        title: 'Ï†ïÎ≥¥',
        message,
        duration: 3000
      })
    }
  }
}

export default ui